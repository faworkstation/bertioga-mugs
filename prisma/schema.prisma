generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  image         String?
  firstName     String?
  lastName      String?
  email         String?   @unique
  phone         String?   @unique
  emailVerified DateTime?
  password      String?
  role          UserRole  @default(USER)

  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?

  accounts Account[]
  Product  Product[]
  Category Category[]
  Order    Order[]
}

model Product {
  id          String   @id @default(uuid())
  price       String
  name        String
  images      String[]
  description String

  properties Json?

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  Category     Category? @relation(fields: [categoryId], references: [id])
  categoryId   String?
  categoryName String?
}

model Category {
  id     String  @id @default(uuid())
  name   String  @unique
  parent String?

  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  Product Product[]
}

model Order {
  id         Int     @id @default(autoincrement())
  line_items Json
  name       String
  email      String
  city       String
  cep        String
  street     String
  phone      String
  paid       Boolean

  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
    
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
